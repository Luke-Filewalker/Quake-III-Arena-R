#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#include "defines.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"

layout(location = PAYLOAD_SHADOW) rayPayloadInNV ShadowRayPayload rp;
hitAttributeNV vec2 hitAttribute;

void main()
{
    //if (alphaTestFails(attribs))
	//	IgnoreHit();
    
    RayPayload rpb;
    rpb.barycentric = hitAttribute;
    rpb.instanceID = gl_InstanceID;
    rpb.primitiveID = gl_PrimitiveID;
    rpb.hit_distance = gl_RayTmaxNV;
    uint material = get_material(rpb);
    
    if(isLight(material)) ignoreIntersectionNV();
    if(isGlass(material)) ignoreIntersectionNV();
    if(isWater(material)) ignoreIntersectionNV();

    if(isSeeThrough(material)) ignoreIntersectionNV();
    if(isSeeThroughAdd(material)) ignoreIntersectionNV();

    // HitPoint hp = getHitPoint(rpb);
	// vec4 tex = getTextureWithLod(hp,0);
    
    //if(tex.w < 0.5f) ignoreIntersectionNV();
    //     // global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).y < 0.1 &&
    //     // global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).z < 0.1) ignoreIntersectionNV();
    // if(is_see_through(rpb)) {
    //     HitPoint hp = getHitPoint(rpb);
    //     //if(all(equal(global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).xyz, vec3(0)))) ignoreIntersectionNV();
    //     // if(global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).x < 0.1 &&
    //     // global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).y < 0.1 &&
    //     // global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).z < 0.1) ignoreIntersectionNV();
         
    //     if(global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0).w < 0.5) ignoreIntersectionNV();
    // }
    
}