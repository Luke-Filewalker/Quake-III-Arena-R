#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#include "defines.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"

layout(location = PAYLOAD_REFLECT) rayPayloadInNV RayPayloadReflect rrp;

hitAttributeNV vec2 hitAttribute;

// void blendSeeThrough(in HitPoint hp){
//   // vec4 tex = getTextureWithLod(hp,0);
//   // tex.xyz *= tex.w;
//   // if(rrp.max_transparent_distance < gl_HitTNV)
//   //   rrp.transparent = alpha_blend_premultiplied(rrp.transparent, tex);
//   // else
//   //   rrp.transparent = alpha_blend_premultiplied(tex, rrp.transparent);

//     vec4 tex = getTextureWithLod(hp,0);
//       tex.xyz *= tex.w;
    
//     if(rrp.max_transparent_distance < gl_HitTNV)
//       rrp.transparent = alpha_blend_premultiplied(rrp.transparent, tex);
//     else
//       rrp.transparent = alpha_blend_premultiplied(tex, rrp.transparent);
// }
// void blendSeeThroughAdd(in HitPoint hp){
//   vec4 tex = getTextureWithLod(hp,0);
//   rrp.transparent.xyz += (tex.xyz * tex.w);
//   rrp.addCount += 1;
//   if(rrp.addCount > 1) rrp.transparent.xyz /= 2.0f;
//   //rrp.transparent.xyzw /= 2.0f;
// }



void main()
{

  RayPayload rpb;
  rpb.barycentric = hitAttribute;
  rpb.instanceID = gl_InstanceID;
	rpb.primitiveID = gl_PrimitiveID;
	rpb.hit_distance = gl_RayTmaxNV;
  uint material = get_material(rpb);

  HitPoint hp = getHitPoint(rpb);

    vec4 tex = getTextureWithLod(hp,0);
    rpb.transparent.xyz += (tex.xyz * tex.w);
    rpb.transparent.w = 1;
//   RayPayload rpb;
//   rpb.barycentric = hitAttribute;
//   rpb.instanceID = gl_InstanceID;
// 	rpb.primitiveID = gl_PrimitiveID;
// 	rpb.hit_distance = gl_RayTmaxNV;
//   uint material = get_material(rpb);

//   HitPoint hp = getHitPoint(rpb);
//   if(isSeeThrough(material)) {
//     blendSeeThrough(hp);
//       rrp.max_transparent_distance = gl_HitTNV;
//   }
//   else if(isSeeThroughAdd(material)) {
//     blendSeeThroughAdd(hp);
//   } else {
//     vec4 tex = getTextureWithLod(hp,0);
//     rrp.transparent.xyzw += tex.xyzw;
//     //rrp.transparent.w = 1;
//       rrp.max_transparent_distance = gl_HitTNV;
//   }
//   //rrp.transparent += tex;
//   // if(is_see_through(rpb)) {
//   //   HitPoint hp = getHitPoint(rpb);
//   //  rrp.transparent = global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0);
//   //  if(rrp.transparent.w < 0.5) {
//   //    rrp.transparent = vec4(0,1,0,0);
//   //  }
//   // }
//   //rrp.transparent += tex;
  rrp.max_transparent_distance = gl_HitTNV;

	ignoreIntersectionNV();
}