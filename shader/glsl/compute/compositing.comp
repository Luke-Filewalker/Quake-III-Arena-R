#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "../constants.h"
#include "../raytracer/defines.glsl"
#include "asvgf.glsl"
#include "../raytracer/rt_Helper.glsl"
#include "../raytracer/gbuffer.glsl"
#include "../raytracer/globalTexture.glsl"

layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(binding = BINDING_OFFSET_RESULT_OUTPUT, set = 0, rgba8) uniform image2D image;
layout(binding = BINDING_OFFSET_RESULT_ACCUMULATION, set = 0, rgba8) uniform image2D imageAccumulation;
layout(binding = BINDING_OFFSET_RESULT_ACCUMULATION_PREV, set = 0, rgba8) uniform image2D imageAccumulationPrev;
layout(binding = BINDING_OFFSET_BLUE_NOISE, set = 0) uniform sampler2DArray blue_noise;


layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "asvgf_taa_code.glsl"

bool
isLight(in uint material) {
	return ((material & MATERIAL_FLAG_LIGHT) == MATERIAL_FLAG_LIGHT);
}

void main() {
	vec4 result = vec4(0);

// 	ivec2 ipos = ivec2(gl_GlobalInvocationID);
//     vec4 color = imageLoad(imgtaaASVGF, ipos);
// 	vec4 albedo = imageLoad(albedoGBuffer, ipos);
// 	vec4 trans = imageLoad(transparentGBuffer, ipos);
// 	vec4 cout = alpha_blend( trans, vec4(color.xyz,1));
// 	vec4 directIll = imageLoad(IMG_GBUFFER_ILLUMINATION, ipos);
// 	//if(trans.a > 0) imageStore(imgtaaASVGF, ipos, trans);

// 	result += albedo;
// 	if(ubo.illumination){
// 		result.xyz *= directIll.xyz;
// 		//result.xyz += albedo.rgb * 0.25f;
// 		result = alpha_blend( trans, vec4(result.xyz,1));

// 		if(ubo.denoiser) result = alpha_blend( trans, vec4(color.xyz,1));//result = alpha_blend( trans, vec4(color.xyz,1));
// 		else result.xyz *= 3.2;
// 	} else result = alpha_blend( trans, vec4(result.xyz,1));

// 	if(ubo.accumulate == 1) {
// 		vec3 outPrev = imageLoad(imageAccumulationPrev, ipos).xyz;
// 		result.xyz = (result.xyz + outPrev);
// 		imageStore(imageAccumulation, ipos, vec4( result.xyz ,1));
// 		result.xyz /= float(ubo.numSamples);
// 	} else{
// 		imageStore(imageAccumulation, ipos, vec4( result.xyz ,1));	
// 	}

// 	imageStore(image, ipos, vec4(result.xyz, 1));
// }

ivec2 ipos = ivec2(gl_GlobalInvocationID);
    vec4 color = imageLoad(IMG_ASVGF_COLOR, ipos);//IMG_ASVGF_COLOR
	vec4 albedo = imageLoad(albedoGBuffer, ipos);
	vec4 trans = imageLoad(transparentGBuffer, ipos);
	vec4 cout = alpha_blend( trans, vec4(color.xyz,1));
	vec4 directIll = imageLoad(IMG_GBUFFER_DIRECT_ILLUMINATION, ipos);
	vec4 indirectIll = imageLoad(IMG_GBUFFER_INDIRECT_ILLUMINATION, ipos);
	uint material = uint(imageLoad(viewGBuffer, ipos).w);
	//if(trans.a > 0) imageStore(imgtaaASVGF, ipos, trans);

	result += albedo;
	if(ubo.illumination){
		result.xyz *= directIll.xyz;
		if(ubo.numBounces > 0) result.xyz += albedo.xyz * indirectIll.xyz;
		//result.xyz += albedo.rgb * 0.25f;
		result = alpha_blend( trans, vec4(result.xyz,1));

		if(ubo.denoiser) {
			color.rgb *= albedo.rgb;
			color.rgb *= 4.0;
			color.rgb -= 0.5;
			color.rgb *= 1.010;
			color.rgb += 0.5;
			color.rgb = clamp(color.rgb, vec3(0), vec3(1));
			result = alpha_blend( trans, vec4(color.xyz,1));//result = alpha_blend( trans, vec4(color.xyz,1));
		}
		else result.xyz *= 3.2;
	} else result = alpha_blend( trans, vec4(result.xyz,1));

	if(ubo.taa == 2) {
		imageStore(IMG_ASVGF_COLOR, ipos, vec4(result.xyz, 1));
		result = temporal_filter();
	}
	if(ubo.accumulate == 1) {
		vec3 outPrev = imageLoad(imageAccumulationPrev, ipos).xyz;
		if (ubo.maxSamples == 0 || ubo.numSamples < ubo.maxSamples) result.xyz = (result.xyz + outPrev);
		else result.xyz = outPrev;
		imageStore(imageAccumulation, ipos, vec4( result.xyz ,1));
		result.xyz /= float( ubo.numSamples != ubo.maxSamples ? ubo.numSamples + 1 : ubo.numSamples);
	} else{
		imageStore(imageAccumulation, ipos, vec4( result.xyz ,1));	
	}

	if(ubo.debugLights){
		if (isLight(material)) result.xyz = vec3(1,0,0);
	}
	result.xyz += ubo.brightness;

	

	if(ubo.tonemappingReinhard > 0) result.xyz = reinhard_extended_luminance(result.xyz, ubo.tonemappingReinhard);
	//if(ubo.tonemappingReinhard > 0) result.xyz = reinhard(result.xyz);
	//imageStore(IMG_ASVGF_COLOR, ipos, vec4(result.xyz, 1));
	if(ubo.taa == 1) imageStore(IMG_ASVGF_COLOR, ipos, vec4(result.xyz, 1));
	else imageStore(imgtaaASVGF, ipos, vec4(result.xyz, 1));
	//imageStore(imgtaaASVGF, ipos, vec4(result.xyz, 1));
	
}