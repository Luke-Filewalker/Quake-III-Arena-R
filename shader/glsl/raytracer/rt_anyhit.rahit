#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"

hitAttributeNV vec2 hitAttribute;
layout(location = 0) rayPayloadInNV RayPayload rp;

void blendSeeThrough(in HitPoint hp){
  vec4 tex = getTextureWithLod(hp,0);
  tex.xyz *= tex.w;
  if(rp.max_transparent_distance < gl_HitTNV)
    rp.transparent = alpha_blend_premultiplied(rp.transparent, tex);
  else
    rp.transparent = alpha_blend_premultiplied(tex, rp.transparent);
}
void blendSeeThroughAdd(in HitPoint hp){
  vec4 tex = getTextureWithLod(hp,0);
  rp.transparent.xyz += (tex.xyz * tex.w);
  rp.transparent.xyz /= 2.0f;
}

void main()
{
  // HitPoint hp = getHitPoint(gl_InstanceID, gl_PrimitiveID, attribs);


  // vec4 contrib = vec4(0,0,0,0);
  // // Explotion bullets etc
  // if((iData.data[gl_InstanceID].material & MATERIAL_KIND_BULLET) == MATERIAL_KIND_BULLET){
  //   contrib = texture(texure_array[uint(uint(iData.data[gl_InstanceID].texIdx))], hp.uv);
  //   if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_NEEDSCOLOR) > 0) {
  //     contrib *= (hp.color/255);
  //     //contrib.xyz *= contrib.w;
  //   }
  //   //contrib *= (hp.color/255);
  //   contrib = vec4(contrib.xyz,0);
  //   if(rp.max_transparent_distance < gl_HitTNV)
  //     rp.transparent = alpha_blend_premultiplied(rp.transparent, contrib);
  //   else
  //     rp.transparent = alpha_blend_premultiplied(contrib, rp.transparent);
  // }
  // // blood smoke etc
  // else if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_PARTICLE) == MATERIAL_FLAG_PARTICLE) {
  //   contrib = texture(texure_array[uint(uint(iData.data[gl_InstanceID].texIdx))], hp.uv);
  //   if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_NEEDSCOLOR) > 0) {
  //     contrib *= (hp.color/255);
  //     contrib.xyz *= contrib.w;
  //   }
  //   if(rp.max_transparent_distance < gl_HitTNV)
  //     rp.transparent = alpha_blend_premultiplied(rp.transparent, contrib);
  //   else
  //     rp.transparent = alpha_blend_premultiplied(contrib, rp.transparent);
  // }
  // else if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_TRANSPARENT) == MATERIAL_FLAG_TRANSPARENT) {
  //   contrib = texture(texure_array[uint(uint(iData.data[gl_InstanceID].texIdx))], hp.uv);
  //   if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_NEEDSCOLOR) > 0) {
  //     contrib *= (hp.color/255);
  //     contrib.xyz *= contrib.w;
  //   }
  //   rp.transparent.xyz += contrib.xyz;
  //   //contrib = vec4(contrib.xyz,0);
  //   // if(rp.max_transparent_distance < gl_HitTNV)
  //   //   rp.transparent = alpha_blend_premultiplied(rp.transparent, contrib);
  //   // else
  //   //   rp.transparent = alpha_blend_premultiplied(contrib, rp.transparent);
  //   //rp.transparent = vec4(1,0,0,0);
  // } else if((iData.data[gl_InstanceID].material & MATERIAL_FLAG_BULLET_MARK) == MATERIAL_FLAG_BULLET_MARK){
  //   contrib = texture(texure_array[uint(uint(iData.data[gl_InstanceID].texIdx))], hp.uv);
  //   //contrib *= contrib.w;
  //   rp.transparent.xyz -= contrib.xyz;
  //   //rp.transparent = alpha_blend_premultiplied(rp.transparent, contrib);
  // }
  // else {
  //   rp.transparent = vec4(1,0,0,0);
  // }is_see_through

  RayPayload rpb;
  rpb.barycentric = hitAttribute;
  rpb.instanceID = gl_InstanceID;
	rpb.primitiveID = gl_PrimitiveID;
	rpb.hit_distance = gl_RayTmaxNV;
  uint material = get_material(rpb);

  HitPoint hp = getHitPoint(rpb);
  if(isSeeThrough(material)) {
    blendSeeThrough(hp);
  }
  else if(isSeeThroughAdd(material)) {
    blendSeeThroughAdd(hp);
  } else {
    vec4 tex = getTextureWithLod(hp,0);
    rp.transparent.xyz += tex.xyz;
    rp.transparent.w = 1;
  }
  //rp.transparent += tex;
  // if(is_see_through(rpb)) {
  //   HitPoint hp = getHitPoint(rpb);
  //  rp.transparent = global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0);
  //  if(rp.transparent.w < 0.5) {
  //    rp.transparent = vec4(0,1,0,0);
  //  }
  // }
  //rp.transparent += tex;
  
  rp.max_transparent_distance = gl_HitTNV;
	ignoreIntersectionNV();
}