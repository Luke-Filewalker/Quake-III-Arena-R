#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "../constants.h"
#include "asvgf.glsl"
#include "../raytracer/gbuffer.glsl"

#include "../raytracer/rt_Helper.glsl"


layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(push_constant) uniform push {
    layout(offset = 0) int iteration;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

float
compute_sigma_luminance(sampler2D img, ivec2 ipos, float center)
{
	const int r = 1;

	//float sum = 0.0;
	float sum = center * gaussian_kernel[0][0];

	for(int yy = -r; yy <= r; yy++) {
		for(int xx = -r; xx <= r; xx++) {
			if(xx != 0 || yy != 0)
			{
				ivec2 p = ipos + ivec2(xx, yy);
				float variance = texelFetch(img, p, 0).a;
				float w = gaussian_kernel[abs(xx)][abs(yy)];
				//float w = 1.0 / float((2 * r + 1) * (2 * r + 1));
				sum += variance * w;
			}
		}
	}

	return max(sum, 1e-8);
}

vec4
filter_image(sampler2D img, const uint iteration)
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);

	float sum_w = 1.0;

	vec3  normal_center  = imageLoad(normalGBuffer, ipos).xyz;
	float depth_center = imageLoad(normalGBuffer, ipos).w;
	//read_normal_depth(tex_depth_normal, ipos, depth_center, normal_center);
	float fwidth_depth = imageLoad(motionGBuffer, ipos).w;
	vec4 color_center = texelFetch(img, ipos, 0);
	float luminance_center = luminance(color_center.rgb);

	//float sigma_l = 2.0 * compute_sigma_luminance(img, ipos);
	float sigma_l = 1.0 / (2.0 * compute_sigma_luminance(img, ipos, luminance_center));

	const int step_size = int(1u << iteration);

	vec3  sum_color    = color_center.rgb;
	float sum_variance = color_center.a;

	//const int r = iteration > 0 ? 1 : 2;
	const int r = 1;
	for(int yy = -r; yy <= r; yy++) {
		for(int xx = -r; xx <= r; xx++) {
			ivec2 p = ipos + ivec2(xx, yy) * step_size;

			if(xx == 0 && yy == 0)
				continue;

			float w = float(all(greaterThanEqual(p, ivec2(0)))
					&& all(lessThan(p, ivec2(ubo.width, ubo.height))));

			vec4  c = texelFetch(img, p, 0);
			float l = luminance(c.rgb);
			float dist_l = abs(luminance_center - l);

			float depth  = imageLoad(normalGBuffer, p).w;
			vec3  normal  = imageLoad(normalGBuffer, p).xyz;
			////read_normal_depth(tex_depth_normal, p, depth, normal);

			float dist_z = abs(depth_center - depth) * fwidth_depth;

			w *= pow(max(0.0, dot(normal_center, normal)), 128.0);
			w *= exp(-dist_z / float(step_size) - dist_l * dist_l * sigma_l);

			sum_color    += c.rgb * w;
			sum_variance += c.a   * w * w;
			sum_w        += w;
		}
	}
	sum_color    /= sum_w;
	sum_variance /= sum_w * sum_w;

	return vec4(sum_color, sum_variance);
}

vec4
_filter_image(const sampler2D img, const uint iteration)
{
	return filter_image(img, iteration);
	//if(frame_idx == 1) return filter_image(img, TEX_PT_DEPTH_NORMAL_B, iteration);
	
}

void
main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, ivec2(ubo.width, ubo.height))))
		return;

	
	vec4 filtered = vec4(0);
	switch(iteration) {
	case 0: filtered = _filter_image(atrousASVGF_A_S, 0); break;
	case 1: filtered = _filter_image(texHistColor_S,  1); break;
	case 2: filtered = _filter_image(atrousASVGF_A_S, 2); break;
	case 3: filtered = _filter_image(atrousASVGF_B_S, 3); break;
	case 4: filtered = _filter_image(atrousASVGF_A_S, 4); break;
	}
	// if(iteration == 4) {
	// 	filtered.rgb *= imageLoad(albedoGBuffer, ipos).rgb;
	// 	filtered.rgb *= 4.0;
	// 	filtered.rgb -= 0.5;
	// 	filtered.rgb *= 1.010;
	// 	filtered.rgb += 0.5;
	// 	filtered.rgb = clamp(filtered.rgb, vec3(0), vec3(1));
	// }
	//if(push.iteration == 4)
	//	filtered = filtered.aaaa;

	//imageStore(IMG_ASVGF_ATROUS_B,  ipos, filtered);
	switch(iteration) {
	case 0: imageStore(IMG_ASVGF_HIST_COLOR,  ipos, filtered);  break;
	case 1: imageStore(IMG_ASVGF_ATROUS_A, ipos, filtered);  break;
	case 2: imageStore(IMG_ASVGF_ATROUS_B, ipos, filtered);  break;
	case 3: imageStore(IMG_ASVGF_ATROUS_A, ipos, filtered);  break;
	case 4: imageStore(IMG_ASVGF_COLOR,       ipos, filtered);  break;
	}
}