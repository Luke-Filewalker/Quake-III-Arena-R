#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"

hitAttributeNV vec2 hitAttribute;
layout(location = 0) rayPayloadInNV RayPayload rp;

void blendSeeThrough(in HitPoint hp){
  // vec4 tex = getTextureWithLod(hp,0);
  // tex.xyz *= tex.w;
  // if(rp.max_transparent_distance < gl_HitTNV)
  //   rp.transparent = alpha_blend_premultiplied(rp.transparent, tex);
  // else
  //   rp.transparent = alpha_blend_premultiplied(tex, rp.transparent);

    vec4 tex = getTextureWithLod(hp,0);
      tex.xyz *= tex.w;
    
    if(rp.max_transparent_distance < gl_HitTNV)
      rp.transparent = alpha_blend_premultiplied(rp.transparent, tex);
    else
      rp.transparent = alpha_blend_premultiplied(tex, rp.transparent);
}
void blendSeeThroughAdd(in HitPoint hp){
  vec4 tex = getTextureWithLod(hp,0);
  rp.transparent.xyz += (tex.xyz * tex.w);
  rp.addCount += 1;
  if(rp.addCount > 1) rp.transparent.xyz /= 2.0f;
  //rp.transparent.xyzw /= 2.0f;
}

void main()
{
  RayPayload rpb;
  rpb.barycentric = hitAttribute;
  rpb.instanceID = gl_InstanceID;
	rpb.primitiveID = gl_PrimitiveID;
	rpb.hit_distance = gl_RayTmaxNV;
  uint material = get_material(rpb);

  HitPoint hp = getHitPoint(rpb);
  if(isSeeThrough(material)) {
    blendSeeThrough(hp);
      rp.max_transparent_distance = gl_HitTNV;
  }
  else if(isSeeThroughAdd(material)) {
    blendSeeThroughAdd(hp);
  } else {
    vec4 tex = getTextureWithLod(hp,0);
    rp.transparent.xyzw += tex.xyzw;
    //rp.transparent.w = 1;
      rp.max_transparent_distance = gl_HitTNV;
  }
  //rp.transparent += tex;
  // if(is_see_through(rpb)) {
  //   HitPoint hp = getHitPoint(rpb);
  //  rp.transparent = global_texture(hp.tex0 & TEX0_IDX_MASK, hp.uv0);
  //  if(rp.transparent.w < 0.5) {
  //    rp.transparent = vec4(0,1,0,0);
  //  }
  // }
  //rp.transparent += tex;
  

	ignoreIntersectionNV();
}