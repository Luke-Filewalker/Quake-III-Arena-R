#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#pragma optionNV (unroll all)
#include "../constants.h"
#include "defines.glsl"
#include "rt_helper.glsl"
#include "sky.glsl"
#include "random.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"
#include "gbuffer.glsl"
#include "../compute/asvgf.glsl"

layout(binding = BINDING_OFFSET_RESULT_OUTPUT, set = 0, rgba8) uniform image2D image;

layout(binding = BINDING_OFFSET_RESULT_ACCUMULATION, set = 0, rgba8) uniform image2D imageAccumulation;
layout(binding = BINDING_OFFSET_RESULT_ACCUMULATION_PREV, set = 0, rgba8) uniform image2D imageAccumulationPrev;
// Bindings
layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
#include "traceRay.glsl"
#include "lights.glsl"

vec3 directIllumination(){
	vec4 primary_albedo;
	vec4 transparent;
	vec3 normal;
	vec3 pos;
	uint cluster;
	uint material;
	float depth;
	vec3 motion;

	uvec4 utemp;
	bool temporal_accum = true;
	//utemp = imageLoad(objectGBuffer, ivec2(gl_LaunchIDNV.xy));
	// material = utemp.x;
	// cluster = utemp.y;
	transparent = imageLoad(transparentGBuffer, ivec2(gl_LaunchIDNV.xy));
	material = uint(imageLoad(viewGBuffer, ivec2(gl_LaunchIDNV.xy)).w);
	if(isWater(material)){
		vec4 reflectAlbedo = imageLoad(reflectionGBuffer, ivec2(gl_LaunchIDNV.xy));
		return alpha_blend( transparent, reflectAlbedo).xyz;
	}
	primary_albedo = imageLoad(albedoGBuffer, ivec2(gl_LaunchIDNV.xy));
	// if(isGlass(material)){
	// 	primary_albedo	= imageLoad(reflectionGBuffer, ivec2(gl_LaunchIDNV.xy));
	// }
	normal = imageLoad(normalGBuffer, ivec2(gl_LaunchIDNV.xy)).xyz;
	pos = imageLoad(posGBuffer, ivec2(gl_LaunchIDNV.xy)).xyz;
	cluster = uint(imageLoad(posGBuffer, ivec2(gl_LaunchIDNV.xy)).w);

	if (isSky(material)) {
		imageStore(IMG_GBUFFER_ILLUMINATION, ivec2(gl_LaunchIDNV.xy), vec4(1,1,1,0));
		return alpha_blend( transparent, vec4(primary_albedo.xyz,1)).xyz;
	}
	//if (isLight(material)) return vec3(1,0,0);
	
	vec3 directIllumination = calcShading(primary_albedo, pos, normal, cluster, material) + 0.05;
	//directIllumination += transparent.xyz;
	vec3 shadeColor = primary_albedo.xyz;
	if(ubo.illumination){
		shadeColor *= directIllumination;
		//shadeColor += primary_albedo.rgb * 0.25f;
	}
	shadeColor = alpha_blend( transparent, vec4(shadeColor.rgb,1) ).xyz;
	imageStore(IMG_GBUFFER_ILLUMINATION, ivec2(gl_LaunchIDNV.xy), vec4( clamp_color(directIllumination, 2) ,1));
	return shadeColor;
}

void main() 
{
	ivec2 ipos = ivec2(gl_LaunchIDNV);
	// rng_seed = (ubo.frameIndex & 1) == 0
	// 	? imageLoad(rngASVGF_A, ipos).r
	// 	: imageLoad(rngASVGF_B, ipos).r;
	rng_seed = imageLoad(IMG_ASVGF_RNG_SEED, ipos).r;

	vec3 color = directIllumination();
	// if(ubo.accumulate == 1) {
	// 	vec3 outPrev = imageLoad(imageAccumulationPrev, ivec2(gl_LaunchIDNV.xy)).xyz;
	// 	color = (color + outPrev);
	// 	imageStore(imageAccumulation, ivec2(gl_LaunchIDNV.xy), vec4( color ,1));
	// 	color /= float(ubo.numSamples);
	// } else{
	// 	imageStore(imageAccumulation, ivec2(gl_LaunchIDNV.xy), vec4( color ,1));	
	// }
	// imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4( color ,1));

}

