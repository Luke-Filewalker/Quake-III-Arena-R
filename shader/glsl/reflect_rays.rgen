#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#pragma optionNV (unroll all)
#include "constants.h"
#include "defines.glsl"
#include "rt_helper.glsl"
#include "rt_sky.glsl"
#include "rt_texture.glsl"
#include "rt_vattributes.glsl"
#include "gbuffer.glsl"

// Bindings
layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(binding = BINDING_OFFSET_GLOBAL_UBO_PREV, set = 0) uniform global_ubo_prev
{
	GlobalUbo uboPrev;
};
#include "traceRay.glsl"



vec4 getTextureLod2(HitPoint hp, uint lod){

	TextureData d = unpackTextureData(hp.tex0);
	vec4 color = vec4(0);
	vec4 tex;
	if(d.tex0 != -1){
		tex = global_textureLod(d.tex0, hp.uv0, lod);
		color = vec4(tex.xyz, 1);
		if(d.tex0Color) color *= (hp.color0/255);
	} else return color;

	if(d.tex1 != -1){
		tex = global_textureLod(d.tex1, hp.uv1, lod);
		if(d.tex1Color) tex *= (hp.color1/255);

		if(d.tex1Blend) {
			color = alpha_blend(tex, color);
		}
		else color += tex;
	} else return color;
	d = unpackTextureData(hp.tex1);
	if(d.tex0 != -1){
		tex = global_textureLod(d.tex0, hp.uv2, lod);
		if(d.tex0Color) tex *= (hp.color2/255);

		if(d.tex0Blend) {
			color = alpha_blend(tex, color);
		}
		else color += tex;
	} else return color;

	if(d.tex1 != -1){
		tex = global_textureLod(d.tex1, hp.uv3, lod);
		if(d.tex1Color) tex *= (hp.color3/255);

		if(d.tex1Blend) {
			color = alpha_blend(tex, color);
		}
		else color += tex;
	} 
	return color;
}

vec4 calculateReflection(vec3 pos, vec3 direction, vec3 N){
	vec3 dirReflection = reflect(direction, N);

	Ray ray;
	ray.origin = pos;
	ray.direction = dirReflection;
	ray.t_min = 0.01;
	ray.t_max = 10000.0;
	trace_ray(ray, RAY_MIRROR_OPAQUE_VISIBLE | RAY_MIRROR_PARTICLE_VISIBLE);

	vec4 albedoReflection;
	if(!found_intersection(rp)){
		albedoReflection = sampleSky(ray.direction);
	} else {
		HitPoint hp = getHitPoint(rp);
		Triangle triangle = getTriangle(rp);
		albedoReflection = getTextureLod2(hp,0);
	}
	return albedoReflection;
}

vec4 calculateRefraction(inout vec3 pos, vec3 direction, vec3 N, float n1, float n2){
	vec3 dirRefraction = refract( direction, N, n2/n1 );
	dirRefraction = refract( dirRefraction, N, n1/n2 );

	Ray ray;
	ray.origin = pos;
	ray.direction = dirRefraction;
	ray.t_min = 0.01;
	ray.t_max = 10000.0;
	trace_ray(ray, RAY_MIRROR_OPAQUE_VISIBLE | RAY_MIRROR_PARTICLE_VISIBLE);
	vec4 albedoRefraction;
	if(!found_intersection(rp)){
		albedoRefraction = sampleSky(ray.direction);
	} else {
		HitPoint hp = getHitPoint(rp);
		Triangle triangle = getTriangle(rp);
		albedoRefraction = getTextureLod2(hp,0);
	}
	return albedoRefraction;
}

void reflectionRefrection(){
	vec4 primary_albedo;
	vec3 normal;
	vec3 pos;
	uint cluster;
	uint material;
	float depth;
	vec3 motion;

	vec4 temp;
	uvec4 utemp;
	primary_albedo = imageLoad(albedoGBuffer, ivec2(gl_LaunchIDNV.xy));
	normal = imageLoad(normalGBuffer, ivec2(gl_LaunchIDNV.xy)).xyz;
	pos = imageLoad(posGBuffer, ivec2(gl_LaunchIDNV.xy)).xyz;
	utemp = imageLoad(objectGBuffer, ivec2(gl_LaunchIDNV.xy));
	material = utemp.x;
	cluster = utemp.y;

	vec3 P = pos;
	vec3 N = normal;
	vec3 shadeColor = primary_albedo.xyz;
	vec3 viewDir = normalize(P - ubo.camPos.xyz);

	vec4 color = vec4(0);
	if (isGlass(material)){
		for(int i =0; i< 2; i++){
			float n1, n2, ndotr = dot(viewDir, N);  
			if( ndotr > 0.0f ) {
				n1 = 1.0; 
				n2 = 1.5;
				N = -N;
			} else {
				n1 = 1.5;
				n2 = 1.0; 
			}

			float F = pow(1.0 - max(0.0, -dot(viewDir, N)), 5.0);
			F = mix(0.5, 1.0, F);

			vec4 albedoReflection = calculateReflection(P, P - ubo.camPos.xyz, N);
			vec4 albedoRefraction = calculateRefraction(P, P - ubo.camPos.xyz, N, n1, n2);

			float r0 = (n1-n2)/(n1+n2); r0 *= r0;
			float fresnel = r0 + (1.-r0) * pow(1.0-abs(ndotr),5.);
			float ratio = 0.2;//0.2;
			vec4 albedo = ratio * albedoReflection + (1 - ratio) * albedoRefraction;

			if(primary_albedo.w == 0.0) color = albedo;
			else color = alpha_blend(primary_albedo, albedo);

			material = get_material(rp);
			
		}
	} else if(isMirror(material)){
		vec4 mirrorColor = primary_albedo;
		mirrorColor = 1 - vec4(mirrorColor/1);
		// 1 - vec4(src/1)
		vec4 reflection = calculateReflection(P, viewDir, N);
		color = vec4(mirrorColor.xyz * reflection.xyz,1);
	} 

	//imageStore(normalGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(normal.xyz,1));
	//imageStore(posGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(pos.xyz, 0));
	//imageStore(objectGBuffer, ivec2(gl_LaunchIDNV.xy), uvec4(material, cluster, 0,0));
	imageStore(reflectionGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(color));
}

void main() 
{
	reflectionRefrection();
}

