#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "../constants.h"
#include "asvgf.glsl"
#include "../raytracer/gbuffer.glsl"

#include "../raytracer/rt_Helper.glsl"

layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(push_constant) uniform push {
    layout(offset = 0) int iteration;
};

float square(float x) { return x * x; }

const float wavelet_factor = 0.5;
const float wavelet_kernel[2][2] = {
	{ 1.0, wavelet_factor  },
	{ wavelet_factor, wavelet_factor * wavelet_factor }
};

// Filter kernel.
// The filter operates on a 1/3 resolution signal, where each 3x3 pixel part of the screen
// is represented by a single low-res pixel, whose depth and normal correspond to the 
// high-res pixel in the center of that square (i.e. the anchor pixel).
void
filter_image(
	sampler2D img_lf_shY, 
	sampler2D img_lf_CoCg, 
	out SH filtered_lf)
{
	ivec2 ipos_lowres = ivec2(gl_GlobalInvocationID);
	ivec2 ipos_hires = ipos_lowres * GRAD_DWN + ivec2(1);

	// Load the color of the target low-res pixel
	SH color_center_lf = load_SH(img_lf_shY, img_lf_CoCg, ipos_lowres);

	if(/*ubo.flt_atrous_lf*/ 4 <= iteration)
	{
		filtered_lf = color_center_lf;
		return;
	}

	// Load the parameters of the anchor pixel
	// vec3 geo_normal_center = decode_normal(texelFetch(TEX_PT_GEO_NORMAL, ipos_hires, 0).x);
	// float depth_center = texelFetch(TEX_PT_VIEW_DEPTH_A, ipos_hires, 0).x;
	// float fwidth_depth = texelFetch(TEX_PT_MOTION, ipos_hires, 0).w;
    vec3  geo_normal_center  = imageLoad(normalGBuffer, ipos_hires).xyz;
	float depth_center = imageLoad(normalGBuffer, ipos_hires).w;
	float fwidth_depth = imageLoad(motionGBuffer, ipos_hires).w;

	const int step_size = int(1u << (iteration - 1));

	SH sum_color_lf = color_center_lf;

	float sum_w_lf = 1.0;

	// Boundaries for the checkerboard field, either left or right half of the screen
	int field_left = 0;
	int field_right = int(ubo.width) / 2;
	if(ipos_hires.x >= field_right)
	{
		field_left = field_right;
		field_right = int(ubo.width);
	}

	// Compute the weighted average of color and moments from a sparse 3x3 pattern around the target pixel
	const int r = 1;
	for(int yy = -r; yy <= r; yy++) {
		for(int xx = -r; xx <= r; xx++) {
			ivec2 p_lowres = ipos_lowres + ivec2(xx, yy) * step_size;
			ivec2 p_hires = p_lowres * GRAD_DWN + ivec2(1);

			if(xx == 0 && yy == 0)
				continue;

			float w = float(all(greaterThanEqual(p_hires, ivec2(field_left, 0)))
					&& all(lessThan(p_hires, ivec2(field_right, ubo.height))));

			// Use geometric normals here so that we can blur over larger areas.
			// The lighting detail will be partially preserved by spherical harmonics.
			//vec3 geo_normal = decode_normal(texelFetch(TEX_PT_GEO_NORMAL, p_hires, 0).x);
			//float depth = texelFetch(TEX_PT_VIEW_DEPTH_A, p_hires, 0).x;
			vec3  geo_normal  = imageLoad(normalGBuffer, p_hires).xyz;
            float depth  = imageLoad(normalGBuffer, p_hires).w;

			float dist_z = abs(depth_center - depth) * fwidth_depth * 0.5;//ubo.flt_atrous_depth;
			w *= exp(-dist_z / float(step_size * GRAD_DWN));
			w *= wavelet_kernel[abs(xx)][abs(yy)];


			float w_lf = w;

			if(/*ubo.flt_atrous_normal_lf*/8 > 0)
			{
				float GNdotGN = max(0.0, dot(geo_normal_center, geo_normal));
				w_lf *= pow(GNdotGN, 8 /*ubo.flt_atrous_normal_lf*/);
			}
			
			SH c_lf = load_SH(img_lf_shY, img_lf_CoCg, p_lowres);

			// The 4th iteration has filter footprint big enough to step over obstacles and produce noticeable light leaking.
			// Prevent that by throwing away samples that are too bright. This also helps make some shadows a bit sharper.
			if(iteration == 3)
				w_lf *= clamp(1.5 - c_lf.shY.w / color_center_lf.shY.w * 0.25, 0, 1);

			accumulate_SH(sum_color_lf, c_lf, w_lf);
			sum_w_lf += w_lf;
		}
	}

	filtered_lf.shY = sum_color_lf.shY / sum_w_lf;
	filtered_lf.CoCg = sum_color_lf.CoCg / sum_w_lf;
}

void deflicker_image(
	sampler2D img_lf_shY, 
	sampler2D img_lf_CoCg, 
	out SH filtered_lf)
{
	ivec2 ipos_lowres = ivec2(gl_GlobalInvocationID);
	SH color_center_lf = load_SH(img_lf_shY, img_lf_CoCg, ipos_lowres);
	ivec2 ipos_hires = ipos_lowres * GRAD_DWN + ivec2(1);
	
	SH sum_color_lf = init_SH();

	const int r = 1;
	const float num_pixels = square(r * 2 + 1) - 1;
	
	for(int yy = -r; yy <= r; yy++) {
		for(int xx = -r; xx <= r; xx++) {
			ivec2 p_lowres = ipos_lowres + ivec2(xx, yy);

			if(xx == 0 && yy == 0)
				continue;

			SH c_lf = load_SH(img_lf_shY, img_lf_CoCg, p_lowres);
			accumulate_SH(sum_color_lf, c_lf, 1.0);
		}
	}


	float max_lum = sum_color_lf.shY.w * 2/*ubo.flt_atrous_deflicker_lf*/ / num_pixels;
	if(color_center_lf.shY.w > max_lum)
	{
		float ratio = max_lum / color_center_lf.shY.w;
		color_center_lf.shY *= ratio;
		color_center_lf.CoCg *= ratio;
	}

	filtered_lf = color_center_lf;
}

void
main()
{
    // ivec2 ipos = ivec2(gl_GlobalInvocationID);
	// if(any(greaterThanEqual(ipos * GRAD_DWN, ivec2(global_ubo.current_gpu_slice_width, global_ubo.height))))
	// 	return;

	// SH filtered_lf;

	// switch(push.iteration) {
	// case 0: deflicker_image(TEX_ASVGF_ATROUS_PING_LF_SH, TEX_ASVGF_ATROUS_PING_LF_COCG, filtered_lf); break;
	// case 1: filter_image(TEX_ASVGF_ATROUS_PONG_LF_SH, TEX_ASVGF_ATROUS_PONG_LF_COCG, filtered_lf); break;
	// case 2: filter_image(TEX_ASVGF_ATROUS_PING_LF_SH, TEX_ASVGF_ATROUS_PING_LF_COCG, filtered_lf); break;
	// case 3: filter_image(TEX_ASVGF_ATROUS_PONG_LF_SH, TEX_ASVGF_ATROUS_PONG_LF_COCG, filtered_lf); break;
	// }

	// switch(push.iteration) {
	// case 0: STORE_SH(IMG_ASVGF_ATROUS_PONG_LF_SH, IMG_ASVGF_ATROUS_PONG_LF_COCG, ipos, filtered_lf); break;
	// case 1: STORE_SH(IMG_ASVGF_ATROUS_PING_LF_SH, IMG_ASVGF_ATROUS_PING_LF_COCG, ipos, filtered_lf); break;
	// case 2: STORE_SH(IMG_ASVGF_ATROUS_PONG_LF_SH, IMG_ASVGF_ATROUS_PONG_LF_COCG, ipos, filtered_lf); break;
	// case 3: STORE_SH(IMG_ASVGF_ATROUS_PING_LF_SH, IMG_ASVGF_ATROUS_PING_LF_COCG, ipos, filtered_lf); break;
	// }
}