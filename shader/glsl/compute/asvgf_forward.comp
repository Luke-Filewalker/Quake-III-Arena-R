#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "../constants.h"
#include "asvgf.glsl"
#include "../raytracer/gbuffer.glsl"
#include "../raytracer/rt_Helper.glsl"
#include "../raytracer/defines.glsl"
#include "../raytracer/vertexData.glsl"

layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(binding = BINDING_OFFSET_GLOBAL_UBO_PREV, set = 0) uniform global_ubo_prev
{
	GlobalUbo uboPrev;
};
layout(binding = BINDING_OFFSET_RESULT_OUTPUT, set = 0, rgba8) uniform image2D image;
layout(binding = BINDING_OFFSET_INSTANCE_PREV_TO_CURR, set = 0) buffer PrevToCurr { int data[]; } prevToCurrInstance;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void
encrypt_tea(inout uvec2 arg)
{
	const uint key[] = {
		0xa341316c, 0xc8013ea4, 0xad90777d, 0x7e95761e
	};
	uint v0 = arg[0], v1 = arg[1];
	uint sum = 0;
	uint delta = 0x9e3779b9;

	for(int i = 0; i < 16; i++) { // XXX rounds reduced, carefully check if good
		//for(int i = 0; i < 32; i++) {
		sum += delta;
		v0 += ((v1 << 4) + key[0]) ^ (v1 + sum) ^ ((v1 >> 5) + key[1]);
		v1 += ((v0 << 4) + key[2]) ^ (v0 + sum) ^ ((v0 >> 5) + key[3]);
	}
	arg[0] = v0;
	arg[1] = v1;
}

bool projection_view_to_screen(vec3 view_pos, out vec2 screen_pos, out float distance, bool previous)
{

	vec4 clip_pos;
	if(previous)
		clip_pos = uboPrev.projMat * vec4(view_pos, 1);
	else
		clip_pos = ubo.projMat * vec4(view_pos, 1);

	vec3 normalized = clip_pos.xyz / clip_pos.w;
	screen_pos.xy = normalized.xy * 0.5 + vec2(0.5);
	distance = length(view_pos);

	return screen_pos.y > 0 && screen_pos.y < 1 && screen_pos.x > 0 && screen_pos.x < 1 && view_pos.z < 0;
	
}

void
main()
{
	ivec2 ipos;
	{
		uvec2 arg = uvec2(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * ubo.width,
				ubo.frameIndex);
		encrypt_tea(arg);
		arg %= GRAD_DWN;

		ipos = ivec2(gl_GlobalInvocationID.xy * GRAD_DWN + arg);
		
	}
	if(any(greaterThanEqual(ipos, ivec2(ubo.width, ubo.height))))
		return;

	//
	vec4 prevObjInfo = imageLoad(objectGBufferPrev, ipos);
	//vec4 vis_buf = imageLoad(objectGBuffer, ipos);
	if(any(lessThan(prevObjInfo.xy, vec2(0))))
		return;

	uint prevInstanceID = floatBitsToUint(prevObjInfo.z);
	uint prevPrimitiveID = floatBitsToUint(prevObjInfo.w);
	uint currInstanceID = prevToCurrInstance.data[prevInstanceID];

	if(currInstanceID == ~0u) return;
	if(currInstanceID == -1) return;

	RayPayload rp;
	rp.instanceID = currInstanceID;
	rp.primitiveID = prevPrimitiveID;
	rp.barycentric = prevObjInfo.xy;
	HitPoint hp = getHitPoint(rp);
	uint cluster = hp.cluster;
	uint prevCluster = getPrevCluster(rp);

	if(cluster != prevCluster) return;

	vec2 screen_pos_curr;
	float distance_curr;
	// vec3 view_pos_curr = (ubo.viewMat * vec4(hp.pos, 1.0)).xyz;
	// if(!projection_view_to_screen(view_pos_curr, screen_pos_curr, distance_curr, false))
	// {
	// 	return;
	// }
	//
	vec4 pos_cs_curr = ubo.projMat * ubo.viewMat  * vec4(hp.pos, 1.0);

	/* check if reprojection lies outside of current view frustum */
	if(any(lessThan(pos_cs_curr.xyz, -pos_cs_curr.www))
	|| any(greaterThan(pos_cs_curr.xyz, pos_cs_curr.www)))
	{
		return;
	}
	pos_cs_curr.xyz /= pos_cs_curr.w;

	// Triangle triangle;
	// if(!visbuf_get_triangle_fwdprj(triangle, vis_buf))
	// 	return;

	// if((triangle.material_id & BSP_FLAG_LIGHT) > 0)
	// 	return;

	// vec3 bary;
	// bary.yz = vis_buf.xy;
	// bary.x  = 1.0 - vis_buf.x - vis_buf.y;
	// vec3 pos_ws = triangle.positions * bary;

	// vec4 pos_cs_curr = global_ubo.VP * vec4(pos_ws, 1.0);

	// /* check if reprojection lies outside of current view frustum */
	// if(any(lessThan(pos_cs_curr.xyz, -pos_cs_curr.www))
	// || any(greaterThan(pos_cs_curr.xyz, pos_cs_curr.www)))
	// {
	// 	return;
	// }
	// pos_cs_curr.xyz /= pos_cs_curr.w;

	/* pixel coordinate of forward projected sample */
	//pos_cs_curr
	//ivec2 ipos_curr = ivec2((screen_pos_curr.xy) * vec2(ubo.width, ubo.height));
	ivec2 ipos_curr = ivec2((pos_cs_curr.xy * 0.5 + 0.5) * vec2(ubo.width, ubo.height));

	ivec2 pos_grad    = ipos_curr / GRAD_DWN;
	ivec2 pos_stratum = ipos_curr % GRAD_DWN;

	uint idx_prev = ipos.x + ipos.y * ubo.width;
	uint gradient_idx =
		  (1 << 31) /* mark sample as busy */
		| (pos_stratum.x << (STRATUM_OFFSET_SHIFT * 0)) /* encode pos in */
		| (pos_stratum.y << (STRATUM_OFFSET_SHIFT * 1)) /* current frame */
		| (idx_prev      << (STRATUM_OFFSET_SHIFT * 2));/* pos in prev frame */

	/* check if this sample is allowed to become a gradient sample */
	if(imageAtomicCompSwap(IMG_ASVGF_GRAD_SAMPLE_POS, pos_grad, 0u, gradient_idx) != 0) {
		return;
	}

	uint rng_prev = imageLoad(IMG_ASVGF_RNG_SEED_PREV, ipos).x;
	imageStore(IMG_ASVGF_RNG_SEED, ipos_curr, rng_prev.xxxx);

	/* forward-project the clip-space position for handling sub-pixel offsets */
	// imageStore(IMG_ASVGF_POS_WS_FWD, pos_grad, vec4(pos_ws, 0.0));

	// vis_buf.z = uintBitsToFloat(map_instance_fwd(floatBitsToUint(vis_buf.z)));
	// imageStore(IMG_ASVGF_VISBUF_FWD, pos_grad, vis_buf);

	imageStore(posFwd, pos_grad, vec4(hp.pos, 0.0));
	imageStore(objectFwd, pos_grad, vec4(rp.barycentric, uintBitsToFloat(rp.instanceID), uintBitsToFloat(rp.primitiveID)));
	//imageStore(debugASVGFBuffer, ipos_curr, vec4(0, v.y, 0, 0));
}