#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#pragma optionNV (unroll all)
#include "../constants.h"
#include "defines.glsl"
#include "rt_helper.glsl"
#include "sky.glsl"
#include "random.glsl"
#include "globalTexture.glsl"
#include "vertexData.glsl"
#include "gbuffer.glsl"

// Bindings
layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(binding = BINDING_OFFSET_GLOBAL_UBO_PREV, set = 0) uniform global_ubo_prev
{
	GlobalUbo uboPrev;
};
#include "traceRay.glsl"
#include "lights.glsl"

struct PrimaryRayHit{
	vec4 albedo;
	vec4 transparent;
	vec3 normal;
	vec3 pos;
	uint cluster;
	uint material;
	float depth;
} hitData;

bool projection_view_to_screen(vec3 view_pos, out vec2 screen_pos, out float distance, bool previous)
{
	vec4 clip_pos;
	if(previous) clip_pos = uboPrev.projMat * vec4(view_pos, 1);
	else clip_pos = ubo.projMat * vec4(view_pos, 1);
	vec3 normalized = clip_pos.xyz / clip_pos.w;
	screen_pos.xy = normalized.xy * 0.5 + vec2(0.5);
	distance = length(view_pos);
	return screen_pos.y > 0 && screen_pos.y < 1 && screen_pos.x > 0 && screen_pos.x < 1 && view_pos.z > 0;
}

Ray
getRay(vec2 pos_cs)
{
	vec4 v_near = ubo.inverseViewMat * ubo.inverseProjMat * vec4(pos_cs, -1, 1.0);
	vec4 v_far  = ubo.inverseViewMat * ubo.inverseProjMat * vec4(pos_cs,  1, 1.0);
	v_near /= v_near.w;
	v_far  /= v_far.w;

	Ray ray;
	ray.origin = v_near.xyz;
	ray.direction = normalize(v_far.xyz - v_near.xyz);
	ray.t_min = 0.01;
	ray.t_max = 10000.0;
	return ray;
}

Ray
getPrimaryRay(vec2 pos_cs)
{
	vec4 v_near = ubo.inverseViewMat * ubo.inverseProjMat * vec4(pos_cs, -1, 1.0);
	vec4 v_far  = ubo.inverseViewMat * ubo.inverseProjMat * vec4(pos_cs,  1, 1.0);
	v_near /= v_near.w;
	v_far  /= v_far.w;

	Ray ray;
	ray.origin = v_near.xyz;
	ray.direction = normalize(v_far.xyz - v_near.xyz);
	ray.t_min = 0.01;
	ray.t_max = 10000.0;

	// add dof effect
	if(ubo.dof > 0){
		vec3 random3 = vec3(get_rng(RNG_C(120), ubo.frameIndex), get_rng(RNG_C(122), ubo.frameIndex), get_rng(RNG_C(102), ubo.frameIndex)) * 2.0 - 1.0;
		vec3 focalPoint = ray.origin + ray.direction * ubo.focalLength;
		// two variants for dof
		// 1) jitter ray origin
		// 2) jitter screen coordinates and calculate ray origin
		if(ubo.dof == 1) {
			ray.origin += random3 * ubo.aperture;
		} else {
			v_near = ubo.inverseViewMat * ubo.inverseProjMat * vec4(pos_cs + random3.xy * ubo.aperture, -1, 1.0);
			v_near /= v_near.w;
			ray.origin = v_near.xyz;
		}
		ray.direction = normalize(focalPoint.xyz - ray.origin);
	}
	return ray;
}

vec4 getTextureLod(vec2 screen_coord_cs, Triangle triangle, HitPoint hp){
	vec2 tex_coord = hp.uv0;
	Ray ray_x = getRay(screen_coord_cs + vec2(2.0 / float(gl_LaunchSizeNV.x), 0));
	Ray ray_y = getRay(screen_coord_cs - vec2(0, 2.0 / float(gl_LaunchSizeNV.y)));

	vec3 bary_x = compute_barycentric(triangle.pos, ray_x.origin, ray_x.direction);
	vec3 bary_y = compute_barycentric(triangle.pos, ray_y.origin, ray_y.direction);

	vec3 pos_ws_x= triangle.pos * bary_x;
	vec3 pos_ws_y= triangle.pos * bary_y;

	vec2 tex_coord_x = triangle.uv0 * bary_x;
	vec2 tex_coord_y = triangle.uv0 * bary_y;
	tex_coord_x -= tex_coord;
	tex_coord_y -= tex_coord;
	tex_coord_x *= 0.5;
	tex_coord_y *= 0.5;

	TextureData d = unpackTextureData(hp.tex0);
	vec4 color = vec4(0);
	vec4 tex;
	if(d.tex0 != -1){
		vec4 tex0 = global_textureGrad(d.tex0, hp.uv0, tex_coord_x, tex_coord_y);
		// if we have more tex to blend set alpha to 1
		if(d.tex1 != -1) color = vec4(tex0.xyz, 1);
		else color = tex0;

		if(d.tex0Color) color *= (hp.color0/255);
	} else return color;
	if(d.tex1 != -1){
		tex_coord = hp.uv1;
		tex_coord_x = triangle.uv1 * bary_x;
		tex_coord_y = triangle.uv1 * bary_y;
		tex_coord_x -= tex_coord;
		tex_coord_y -= tex_coord;
		tex_coord_x *= 0.5;
		tex_coord_y *= 0.5;
		vec4 tex1 = global_textureGrad(d.tex1, hp.uv1, tex_coord_x, tex_coord_y);
		if(d.tex1Color) tex1 *= (hp.color1/255);

		if(d.tex1Blend) {
			color = alpha_blend(tex1, color);
		}
		else color += tex1;
	} else return color;

	TextureData d2 = unpackTextureData(hp.tex1);
	if(d2.tex0 != -1){
		tex_coord = hp.uv2;
		tex_coord_x = triangle.uv2 * bary_x;
		tex_coord_y = triangle.uv2 * bary_y;
		tex_coord_x -= tex_coord;
		tex_coord_y -= tex_coord;
		tex_coord_x *= 0.5;
		tex_coord_y *= 0.5;
		vec4 tex2 = global_textureGrad(d2.tex0, hp.uv2, tex_coord_x, tex_coord_y);
		if(d2.tex0Color) tex2 *= (hp.color2/255);

		if(d2.tex0Blend) {
			color = alpha_blend(tex2, color);
		}
		else color += tex2;
	} else return color;
	if(d2.tex1 != -1){
		tex_coord = hp.uv3;
		tex_coord_x = triangle.uv3 * bary_x;
		tex_coord_y = triangle.uv3 * bary_y;
		tex_coord_x -= tex_coord;
		tex_coord_y -= tex_coord;
		tex_coord_x *= 0.5;
		tex_coord_y *= 0.5;
		vec4 tex3 = global_textureGrad(d2.tex1, hp.uv3, tex_coord_x, tex_coord_y);
		if(d2.tex1Color) tex3 *= (hp.color3/255);

		if(d2.tex1Blend) {
			color = alpha_blend(tex3, color);
		}
		else color += tex3;
	} 
	return color;
}

vec2 getScreenCoordinates(){
	// pixel center offset
	vec2 pixelOffset = vec2(0.5);
	// for antialiasing use jittered pixel position
	if(ubo.randomPixelOffset){
		pixelOffset = vec2(get_rng(RNG_C(100), ubo.frameIndex), get_rng(RNG_C(100), ubo.frameIndex));
	}
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + pixelOffset;
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	const vec2 screenCoordClipSpace  = inUV * 2.0 - 1.0;
	return screenCoordClipSpace;
}

void shootPrimaryRay(Ray ray, vec2 sccs){
	traceRay(ray, RAY_FIRST_PERSON_OPAQUE_VISIBLE | RAY_FIRST_PERSON_PARTICLE_VISIBLE);

	if(!found_intersection(rp)){
		hitData.albedo = sampleSky(ray.direction);
		hitData.normal = vec3(0);
		hitData.pos = vec3(0);
		hitData.material = MATERIAL_KIND_SKY;
		hitData.depth = 10000;
	} else {
		HitPoint hp = getHitPoint(rp);
		Triangle triangle = getTriangle(rp);

		hitData.albedo = getTextureLod(sccs, triangle, hp);
		hitData.transparent = rp.transparent;
		hitData.normal = hp.normal;
		hitData.pos = hp.pos;
		hitData.cluster = int(hp.cluster);
		hitData.material = get_material(rp);
		if(is_player(rp)) hitData.material |= MATERIAL_FLAG_PLAYER_OR_WEAPON;
		hitData.depth = rp.hit_distance;

		//if(is_light(rp)) hitData.albedo += vec4(1,0,0,0);
	}

	//vec3 posPrev = getHitPointPrev(rp).pos;//temp.xyz;
	// vec3 velocity;
	// vec2 screenPos;
	// float distanceCurr;
	// vec2 screenPosPrev;
	// float distancePrev;
	// projection_view_to_screen((ubo.viewMat * vec4(pos,1)).xyz, screenPos, distanceCurr, false);

	// projection_view_to_screen((uboPrev.viewMat * vec4(posPrev,1)).xyz, screenPosPrev, distancePrev, true);
	// velocity.xy = abs(screenPosPrev - screenPos) * 20;
	// velocity.z = abs(distancePrev - distanceCurr);
}

void main() 
{
	vec2 sccs = getScreenCoordinates(); // screen coordinates in clip space
	Ray ray = getPrimaryRay(sccs);
	// get distance to first opaque object
	traceRayOpaque(ray, RAY_FIRST_PERSON_OPAQUE_VISIBLE);
	ray.t_max = rp.hit_distance + 0.001;
	shootPrimaryRay(ray, sccs);

	// store data in g buffer
	imageStore(albedoGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(hitData.albedo));
	imageStore(transparentGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(hitData.transparent));
	imageStore(normalGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(hitData.normal.xyz,1));
	imageStore(posGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(hitData.pos.xyz, 0));
	imageStore(objectGBuffer, ivec2(gl_LaunchIDNV.xy), uvec4(hitData.material, hitData.cluster, rp.instanceID,0));
	imageStore(viewGBuffer, ivec2(gl_LaunchIDNV.xy), vec4(ray.direction.xyz, 0));
}

