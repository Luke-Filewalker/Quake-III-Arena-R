

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "../constants.h"
#include "asvgf.glsl"
#include "../raytracer/gbuffer.glsl"
#include "../raytracer/rt_Helper.glsl"
#include "../raytracer/defines.glsl"
#include "../raytracer/vertexData.glsl"

layout(binding = BINDING_OFFSET_GLOBAL_UBO, set = 0) uniform global_ubo
{
	GlobalUbo ubo;
};
layout(binding = BINDING_OFFSET_GLOBAL_UBO_PREV, set = 0) uniform global_ubo_prev
{
	GlobalUbo uboPrev;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
vec4
compute_gradient_image()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	vec2 mom = vec2(0);
	vec4 ret = vec4(0);

	for(int yy = 0; yy < GRAD_DWN; yy++) {
		for(int xx = 0; xx < GRAD_DWN; xx++) {
			ivec2 p = ipos * GRAD_DWN + ivec2(xx, yy);

			//vec3 c = imageLoad(tex_pt_curr, p).rgb;
			vec3 c = imageLoad(IMG_GBUFFER_DIRECT_ILLUMINATION, p).rgb;


			float l = luminance(c);
			mom += vec2(l, l * l);
		}
	}
	mom /= float(GRAD_DWN * GRAD_DWN);
	ret.zw = vec2(mom.x, sqrt(max(0.0, mom.y - mom.x * mom.x)));

	uint u = imageLoad(IMG_ASVGF_GRAD_SAMPLE_POS, ipos).r;
	if(u == 0u) return ret;

	/* position of sample inside of stratum in the current frame */
	ivec2 grad_strata_pos = ivec2(
			u >> (STRATUM_OFFSET_SHIFT * 0),
			u >> (STRATUM_OFFSET_SHIFT * 1)) & STRATUM_OFFSET_MASK;

	/* full position in current frame for gradient sample */
	ivec2 grad_sample_pos_curr = ipos * GRAD_DWN + grad_strata_pos;
	uint idx_prev = (u & (~(1 << 31))) >> (2 * STRATUM_OFFSET_SHIFT);

	/* full position in the previous frame */
	int w = int(ubo.width);
	ivec2 grad_sample_pos_prev = ivec2(idx_prev % w, idx_prev / w);

	// vec3 c_curr = imageLoad(tex_pt_curr, grad_sample_pos_curr).rgb;
	// vec3 c_prev = imageLoad(tex_pt_prev, grad_sample_pos_prev).rgb;
	vec3 c_curr = imageLoad(IMG_GBUFFER_DIRECT_ILLUMINATION, grad_sample_pos_curr).rgb;
	vec3 c_prev = imageLoad(IMG_GBUFFER_DIRECT_ILLUMINATION_PREV, grad_sample_pos_prev).rgb;

	float l_curr = luminance(c_curr);
	float l_prev = luminance(c_prev);

	ret.x = l_curr - l_prev;
	ret.y = max(l_curr, l_prev);

	return ret;
}

void
main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, ivec2(ubo.width, ubo.height) / GRAD_DWN)))
		return;

	vec4 v = compute_gradient_image();
	imageStore(IMG_ASVGF_GRAD_A, ipos, v);

// #if 0
	// imageStore(IMG_ASVGF_DEBUG, ipos * GRAD_DWN + ivec2(0, 0), vec4(v.x, -v.x, 0, 1));
	// imageStore(IMG_ASVGF_DEBUG, ipos * GRAD_DWN + ivec2(1, 0), vec4(v.x, -v.x, 0, 1));
	// imageStore(IMG_ASVGF_DEBUG, ipos * GRAD_DWN + ivec2(0, 1), vec4(v.x, -v.x, 0, 1));
	// imageStore(IMG_ASVGF_DEBUG, ipos * GRAD_DWN + ivec2(1, 1), vec4(v.x, -v.x, 0, 1));
// #endif
// 	imageStore(debugASVGFBuffer, ipos + ivec2(0, global_ubo.height / GRAD_DWN), vec4(0, v.y, 0, 0));
}